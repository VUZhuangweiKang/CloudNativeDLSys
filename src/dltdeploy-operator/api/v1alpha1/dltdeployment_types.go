/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

import (
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// NotificationLevel EDIT THIS FILE!  THIS IS SCAFFOLDING FOR YOU TO OWN!
// NOTE: json tags are required.  Any new fields you add must have json tags for the fields to be serialized.
// NotificationLevel defines the level of a Notification.
type NotificationLevel string

const (
	// NotificationLevelWarning - Only Warnings
	NotificationLevelWarning NotificationLevel = "warning"

	// NotificationLevelInfo - Only info
	NotificationLevelInfo NotificationLevel = "info"
)

// ConfigMapRef is reference to Kubernetes ConfigMap.
type ConfigMapRef struct {
	Name string `json:"name"`
}

type JobDatasetKeysStruct struct {
	Train []string `json:"train"`

	// +optional
	Validation []string `json:"validation,omitempty"`

	// +optional
	Test []string `json:"test,omitempty"`
}
type DataSourceStruct struct {
	Name   string               `json:"name"`
	Bucket string               `json:"bucket"`
	Keys   JobDatasetKeysStruct `json:"keys"`
}

// Job Container defines Kubernetes container attributes.
type Job struct {
	// Name of the container specified as a DNS_LABEL.
	// Each container in a pod must have a unique name (DNS_LABEL).
	Name string `json:"name"`

	// Unique Job ID, this is generated by controller
	UID string `json:"uid,omitempty"`

	// container template for worker pod
	WorkerContainer corev1.Container `json:"workerContainer"`

	// +optional
	NumWorkers int `json:"numWorkers" default:"1"`

	// Connection and dataset information.
	DataSource DataSourceStruct `json:"datasource"`

	// worker's ID (pod id) belong to this job
	Workers []string `json:"workers,omitempty"`

	// worker locations
	Nodes []string `json:"nodes"`

	// +optional
	Merge int `json:"merge" default:"1"`

	// +optional
	Probe int `json:"probe" default:"0"`

	// +optional
	ThreadPoolSize int `json:"threadpool_size" default:"1"`
}

type S3AuthStruct struct {
	AccessKeyID     string `json:"aws_access_key_id"`
	SecretAccessKey string `json:"aws_secret_access_key"`
	RegionName      string `json:"region_name"`
	SessionToken    string `json:"session_token,omitempty"`
}

type CredentialStruct struct {
	Username string       `json:"username"`
	Password string       `json:"password"`
	S3Auth   S3AuthStruct `json:"s3auth,omitempty"`
}

// DLTDeploymentSpec defines the desired state of DLTDeployment
type DLTDeploymentSpec struct {
	Credential CredentialStruct `json:"credential"`
	Jobs       []Job            `json:"jobs"`
}

// DLTDeploymentStatus defines the observed state of DLTDeployment
type DLTDeploymentStatus struct {
	// Client container in every DLTPod
	// +optional
	Client string `json:"client,omitempty"`

	// Created jobs in this DLTDeployment
	// +optional
	CreatedJobs []string `json:"createdjobs,omitempty" default:"false"`
}

//+kubebuilder:object:root=true
//+kubebuilder:subresource:status

// DLTDeployment is the Schema for the dltdeployments API
type DLTDeployment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   DLTDeploymentSpec   `json:"spec,omitempty"`
	Status DLTDeploymentStatus `json:"status,omitempty"`
}

//+kubebuilder:object:root=true

// DLTDeploymentList contains a list of DLTDeployment
type DLTDeploymentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DLTDeployment `json:"items"`
}

func init() {
	SchemeBuilder.Register(&DLTDeployment{}, &DLTDeploymentList{})
}
